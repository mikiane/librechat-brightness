#!/usr/bin/env bash
# backup_librechat.sh
# Script de sauvegarde compl√®te pour une instance LibreChat d√©ploy√©e en Docker Compose

set -euo pipefail

### Chargement safe des variables d'environnement depuis .env ###
if [ -f .env ]; then
  echo "‚è≥ Chargement des variables d'environnement depuis .env"
  while IFS= read -r line; do
    # Ignorer commentaires et lignes vides
    [[ "$line" =~ ^[[:space:]]*# ]] && continue
    [[ ! "$line" =~ ^[[:space:]]*[A-Za-z_][A-Za-z0-9_]*= ]] && continue
    export "$line"
  done < .env
fi

### CONFIGURATION ‚Äì adapt√© √† votre environnement ###
# R√©pertoire o√π stocker les backups (par d√©faut le r√©pertoire courant)
BACKUP_BASE_DIR="${BACKUP_BASE_DIR:-.}"

# Noms des conteneurs Docker (service par d√©faut LibreChat)
MONGO_CONTAINER="${MONGO_CONTAINER:-chat-mongodb}"
PG_CONTAINER="${PG_CONTAINER:-vectordb}"

# Param√®tres PostgreSQL (charg√©s depuis .env si pr√©sents)
PG_USER="${PG_USER:-${POSTGRES_USER:-}}"
PG_DB="${PG_DB:-${POSTGRES_DB:-}}"

# Volumes Docker √† sauvegarder (modifiez si besoin)
VOLUMES=("librechat_uploads")

# Fichiers de config √† copier (dans la racine du projet)
CONFIG_FILES=(".env" "docker-compose.yml")

# R√©tention : supprimer les backups de plus de N jours (mettre 0 pour d√©sactiver)
RETENTION_DAYS=30
### FIN DE LA CONFIG ###

TIMESTAMP="$(date +'%Y-%m-%d_%Hh%M')"
BACKUP_DIR="$BACKUP_BASE_DIR/backup_$TIMESTAMP"

echo "üóÉÔ∏è  D√©marrage du backup LibreChat : $TIMESTAMP"

# Cr√©ation du r√©pertoire de backup
mkdir -p "$BACKUP_DIR"

# 1. Sauvegarde MongoDB (sans authentification)
echo "  ‚Ä¢ Sauvegarde MongoDB ($MONGO_CONTAINER)‚Ä¶"
docker exec -i "$MONGO_CONTAINER" \
  mongodump --archive --gzip --db LibreChat \
  > "$BACKUP_DIR/mongo_LibreChat_$TIMESTAMP.gz"

# 2. Sauvegarde PostgreSQL vectordb (sans mot de passe)
echo "  ‚Ä¢ Sauvegarde PostgreSQL ($PG_CONTAINER)‚Ä¶"
if [ -z "$PG_DB" ]; then
  echo "    ‚ö†Ô∏è  POSTGRES_DB non d√©fini, passez-le via .env ou variable PG_DB"
else
  cmd="pg_dump"
  [ -n "$PG_USER" ] && cmd="$cmd --username=$PG_USER"
  cmd="$cmd --dbname=$PG_DB"
  docker exec -i "$PG_CONTAINER" bash -c "$cmd" \
    > "$BACKUP_DIR/postgres_vectordb_$TIMESTAMP.sql"
fi

# 3. Sauvegarde des volumes Docker
for vol in "${VOLUMES[@]}"; do
  echo "  ‚Ä¢ Sauvegarde volume Docker : $vol"
  docker run --rm \
    -v "$vol":/data \
    -v "$BACKUP_DIR":/backup \
    alpine sh -c "tar czf /backup/vol_${vol}_$TIMESTAMP.tgz -C /data ."
done

# 4. Copie des fichiers de configuration
echo "  ‚Ä¢ Copie des fichiers de configuration"
for f in "${CONFIG_FILES[@]}"; do
  if [ -f "$f" ]; then
    cp "$f" "$BACKUP_DIR/"
  else
    echo "    ‚ö†Ô∏è  Fichier non trouv√© : $f"
  fi
done

# 5. Nettoyage des anciens backups
if [ "$RETENTION_DAYS" -gt 0 ]; then
  echo "  ‚Ä¢ Nettoyage des backups de plus de $RETENTION_DAYS jours"
  find "$BACKUP_BASE_DIR" -maxdepth 1 -type d -mtime +"$RETENTION_DAYS" -exec rm -rf {} \\
    \;
fi

echo "‚úÖ Backup termin√©. Fichiers stock√©s dans $BACKUP_DIR"
